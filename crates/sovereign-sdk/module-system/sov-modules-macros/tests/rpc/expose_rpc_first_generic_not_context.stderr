error[E0220]: associated type `Storage` not found for `S`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:96:1
   |
96 | #[expose_rpc]
   | ^^^^^^^^^^^^^ associated type `Storage` not found
   |
   = note: this error originates in the attribute macro `expose_rpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `S: sov_modules_api::Context` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:99:16
   |
99 | struct Runtime<S: TestSpec, C: Context> {
   |                ^ the trait `sov_modules_api::Context` is not implemented for `S`
   |
note: required by a bound in `sov_modules_api::Genesis::Context`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/module/mod.rs
   |
   |     type Context: Context;
   |                   ^^^^^^^ required by this bound in `Genesis::Context`
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Context, C: Context> {
   |                            ++++++++++++++++++++++++++

error[E0277]: `<S as TestSpec>::Data` cannot be shared between threads safely
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:99:8
   |
99 | struct Runtime<S: TestSpec, C: Context> {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<S as TestSpec>::Data` cannot be shared between threads safely
   |
   = help: within `Runtime<S, C>`, the trait `std::marker::Sync` is not implemented for `<S as TestSpec>::Data`, which is required by `Runtime<S, C>: std::marker::Sync`
note: required because it appears within the type `PhantomData<<S as TestSpec>::Data>`
  --> $RUST/core/src/marker.rs
   |
   | pub struct PhantomData<T: ?Sized>;
   |            ^^^^^^^^^^^
note: required because it appears within the type `sov_modules_api::StateValue<<S as TestSpec>::Data>`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-api/src/containers/value.rs
   |
   | pub struct StateValue<V, Codec = BorshCodec> {
   |            ^^^^^^^^^^
note: required because it appears within the type `QueryModule<C, <S as TestSpec>::Data>`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:33:16
   |
33 |     pub struct QueryModule<C: Context, D: Data> {
   |                ^^^^^^^^^^^
note: required because it appears within the type `Runtime<S, C>`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:99:8
   |
99 | struct Runtime<S: TestSpec, C: Context> {
   |        ^^^^^^^
note: required by a bound in `sov_modules_api::DispatchCall`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/module/dispatch.rs
   |
   | pub trait DispatchCall: Send + Sync {
   |                                ^^^^ required by this bound in `DispatchCall`
help: consider further restricting the associated type
   |
99 | struct Runtime<S: TestSpec, C: Context> where <S as TestSpec>::Data: std::marker::Sync {
   |                                         ++++++++++++++++++++++++++++++++++++++++++++++

error[E0277]: `<S as TestSpec>::Data` cannot be sent between threads safely
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:99:8
   |
99 | struct Runtime<S: TestSpec, C: Context> {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<S as TestSpec>::Data` cannot be sent between threads safely
   |
   = help: within `Runtime<S, C>`, the trait `Send` is not implemented for `<S as TestSpec>::Data`, which is required by `Runtime<S, C>: Send`
note: required because it appears within the type `PhantomData<<S as TestSpec>::Data>`
  --> $RUST/core/src/marker.rs
   |
   | pub struct PhantomData<T: ?Sized>;
   |            ^^^^^^^^^^^
note: required because it appears within the type `sov_modules_api::StateValue<<S as TestSpec>::Data>`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-api/src/containers/value.rs
   |
   | pub struct StateValue<V, Codec = BorshCodec> {
   |            ^^^^^^^^^^
note: required because it appears within the type `QueryModule<C, <S as TestSpec>::Data>`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:33:16
   |
33 |     pub struct QueryModule<C: Context, D: Data> {
   |                ^^^^^^^^^^^
note: required because it appears within the type `Runtime<S, C>`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:99:8
   |
99 | struct Runtime<S: TestSpec, C: Context> {
   |        ^^^^^^^
note: required by a bound in `sov_modules_api::DispatchCall`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/module/dispatch.rs
   |
   | pub trait DispatchCall: Send + Sync {
   |                         ^^^^ required by this bound in `DispatchCall`
help: consider further restricting the associated type
   |
99 | struct Runtime<S: TestSpec, C: Context> where <S as TestSpec>::Data: Send {
   |                                         +++++++++++++++++++++++++++++++++

error[E0277]: the trait bound `S: sov_modules_api::Context` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:99:16
   |
99 | struct Runtime<S: TestSpec, C: Context> {
   |                ^ the trait `sov_modules_api::Context` is not implemented for `S`
   |
note: required by a bound in `sov_modules_api::DispatchCall::Context`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/module/dispatch.rs
   |
   |     type Context: Context;
   |                   ^^^^^^^ required by this bound in `DispatchCall::Context`
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Context, C: Context> {
   |                            ++++++++++++++++++++++++++

error[E0277]: `<S as TestSpec>::Data` cannot be shared between threads safely
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:19
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |                   ^^^^^^^^^^^^ `<S as TestSpec>::Data` cannot be shared between threads safely
   |
   = help: within `RuntimeCall<S, C>`, the trait `std::marker::Sync` is not implemented for `<S as TestSpec>::Data`, which is required by `RuntimeCall<S, C>: std::marker::Sync`
note: required because it appears within the type `RuntimeCall<S, C>`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:19
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |                   ^^^^^^^^^^^^
note: required by a bound in `sov_modules_api::DispatchCall::Decodable`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/module/dispatch.rs
   |
   |     type Decodable: Send + Sync;
   |                            ^^^^ required by this bound in `DispatchCall::Decodable`
   = note: this error originates in the derive macro `DispatchCall` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting the associated type
   |
99 | struct Runtime<S: TestSpec, C: Context> where <S as TestSpec>::Data: std::marker::Sync {
   |                                         ++++++++++++++++++++++++++++++++++++++++++++++

error[E0277]: `<S as TestSpec>::Data` cannot be sent between threads safely
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:19
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |                   ^^^^^^^^^^^^ `<S as TestSpec>::Data` cannot be sent between threads safely
   |
   = help: within `RuntimeCall<S, C>`, the trait `Send` is not implemented for `<S as TestSpec>::Data`, which is required by `RuntimeCall<S, C>: Send`
note: required because it appears within the type `RuntimeCall<S, C>`
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:19
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |                   ^^^^^^^^^^^^
note: required by a bound in `sov_modules_api::DispatchCall::Decodable`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/module/dispatch.rs
   |
   |     type Decodable: Send + Sync;
   |                     ^^^^ required by this bound in `DispatchCall::Decodable`
   = note: this error originates in the derive macro `DispatchCall` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting the associated type
   |
99 | struct Runtime<S: TestSpec, C: Context> where <S as TestSpec>::Data: Send {
   |                                         +++++++++++++++++++++++++++++++++

error[E0277]: the trait bound `S: Spec` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:19
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |                   ^^^^^^^^^^^^ the trait `Spec` is not implemented for `S`
   |
   = note: this error originates in the derive macro `DispatchCall` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Spec, C: Context> {
   |                            +++++++++++++++++++++++

error[E0277]: the trait bound `S: Spec` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:96:1
   |
96 | #[expose_rpc]
   | ^^^^^^^^^^^^^ the trait `Spec` is not implemented for `S`
   |
   = note: this error originates in the attribute macro `expose_rpc` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Spec, C: Context> {
   |                            +++++++++++++++++++++++

error[E0053]: method `get_working_set` has an incompatible type for trait
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:96:1
   |
96 | #[expose_rpc]
   | ^^^^^^^^^^^^^
   | |
   | expected type parameter `C`, found type parameter `S`
   | help: change the output type to match the trait: `sov_modules_api::WorkingSet<C>`
...
99 | struct Runtime<S: TestSpec, C: Context> {
   |                -            - expected type parameter
   |                |
   |                found type parameter
   |
note: type in trait
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:86:57
   |
86 |             pub fn query_value(&self, working_set: &mut WorkingSet<C>) -> RpcResult<QueryResponse> {
   |                                                         ^^^^^^^^^^^^^
   = note: expected signature `fn(&RpcStorage<_, _>) -> sov_modules_api::WorkingSet<C>`
              found signature `fn(&RpcStorage<_, _>) -> sov_modules_api::WorkingSet<S>`
   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound
   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters
   = note: this error originates in the attribute macro `expose_rpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `S: sov_modules_api::Context` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:10
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |          ^^^^^^^ the trait `sov_modules_api::Context` is not implemented for `S`
   |
note: required by a bound in `sov_modules_api::WorkingSet`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/storage/scratchpad.rs
   |
   | pub struct WorkingSet<C: Context> {
   |                          ^^^^^^^ required by this bound in `WorkingSet`
   = note: this error originates in the derive macro `Genesis` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Context, C: Context> {
   |                            ++++++++++++++++++++++++++

error[E0277]: the trait bound `S: sov_modules_api::Context` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:97:19
   |
97 | #[derive(Genesis, DispatchCall, MessageCodec, DefaultRuntime)]
   |                   ^^^^^^^^^^^^ the trait `sov_modules_api::Context` is not implemented for `S`
   |
note: required by a bound in `sov_modules_api::WorkingSet`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/storage/scratchpad.rs
   |
   | pub struct WorkingSet<C: Context> {
   |                          ^^^^^^^ required by this bound in `WorkingSet`
   = note: this error originates in the derive macro `DispatchCall` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Context, C: Context> {
   |                            ++++++++++++++++++++++++++

error[E0277]: the trait bound `S: sov_modules_api::Context` is not satisfied
  --> tests/rpc/expose_rpc_first_generic_not_context.rs:96:1
   |
96 | #[expose_rpc]
   | ^^^^^^^^^^^^^ the trait `sov_modules_api::Context` is not implemented for `S`
   |
note: required by a bound in `sov_modules_api::WorkingSet`
  --> $WORKSPACE/crates/sovereign-sdk/module-system/sov-modules-core/src/storage/scratchpad.rs
   |
   | pub struct WorkingSet<C: Context> {
   |                          ^^^^^^^ required by this bound in `WorkingSet`
   = note: this error originates in the attribute macro `expose_rpc` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
   |
99 | struct Runtime<S: TestSpec + sov_modules_api::Context, C: Context> {
   |                            ++++++++++++++++++++++++++
