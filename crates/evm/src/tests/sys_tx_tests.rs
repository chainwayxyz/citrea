use std::collections::HashMap;
use std::str::FromStr;

use reth_primitives::constants::ETHEREUM_BLOCK_GAS_LIMIT;
use reth_primitives::{address, b256, hex, BlockNumberOrTag, Log};
use reth_rpc_types::{TransactionInput, TransactionRequest};
use revm::primitives::{Bytes, U256};
use sov_modules_api::default_context::DefaultContext;
use sov_modules_api::hooks::HookSoftConfirmationInfo;
use sov_modules_api::utils::generate_address;
use sov_modules_api::{Context, Module, StateMapAccessor, StateVecAccessor};

use crate::call::CallMessage;
use crate::evm::primitive_types::Receipt;
use crate::evm::system_contracts::BitcoinLightClient;
use crate::smart_contracts::{BlockHashContract, LogsContract};
use crate::system_contracts::Bridge;
use crate::tests::call_tests::{
    create_contract_message, create_contract_message_with_fee, get_evm_config_starting_base_fee,
    publish_event_message,
};
use crate::tests::utils::get_evm;
use crate::{AccountData, EvmConfig, SYSTEM_SIGNER};

type C = DefaultContext;

#[test]
fn test_sys_bitcoin_light_client() {
    let (mut config, dev_signer, _) =
        get_evm_config_starting_base_fee(U256::from_str("1000000").unwrap(), None, 1);

    config_push_contracts(&mut config);

    let (evm, mut working_set) = get_evm(&config);

    assert_eq!(
        evm.receipts
            .iter(&mut working_set.accessory_state())
            .collect::<Vec<_>>(),
        [
            Receipt { // BitcoinLightClient::initializeBlockNumber(U256)
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 43615,
                    logs: vec![]
                },
                gas_used: 43615,
                log_index_start: 0,
                diff_size: 220,
            },
            Receipt { // BitcoinLightClient::setBlockInfo(U256, U256)
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 117196,
                    logs: vec![
                        Log {
                            address: BitcoinLightClient::address(),
                            topics: vec![b256!("32eff959e2e8d1609edc4b39ccf75900aa6c1da5719f8432752963fdf008234f")],
                            data: Bytes::from_static(&hex!("000000000000000000000000000000000000000000000000000000000000000201010101010101010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020202020202020202020202")),
                        }
                    ]
                },
                gas_used: 73581,
                log_index_start: 0,
                diff_size: 348,
            },
            Receipt {
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 415667,
                    logs: vec![
                        Log {
                            address: Bridge::address(),
                            topics: vec![b256!("fbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad03")],
                            data: Bytes::from_static(&hex!("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddeaddead")),
                        },
                        Log {
                            address: Bridge::address(),
                            topics: vec![b256!("89ed79f38bee253aee2fb8d52df0d71b4aaf0843800d093a499a55eeca455c34")],
                            data: Bytes::from_static(&hex!("00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000afc3203402ede68395331e2797e1d8fd2ba951386baab32d1440252c3214e0708fe479ad20c18c593480f4f55a3fd7617c9df6e3dabc80fca5927f66d20050c82a2012be7aad2089c310c07b3c3901562a3f000c4a477fcb5ebfd362de3d07a0bff927f2911301ad2067de68f8eb816c86396802b389dedec01703d79e9910e0c846f48920a3e33dd7ad2040f1506702e400b8d1aed2de05bf776e6d7602378ab0834a7d771039454af56ead51006314000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016800000000000000000000000000000000000000000000000000000000000000"))
                        }
                    ]
                },
                gas_used: 298471,
                log_index_start: 1,
                diff_size: 924,
            }
        ]
    );

    let l1_fee_rate = 1;

    let system_account = evm.accounts.get(&SYSTEM_SIGNER, &mut working_set).unwrap();
    // The system caller balance is unchanged(if exists)/or should be 0
    assert_eq!(system_account.info.balance, U256::from(0));
    assert_eq!(system_account.info.nonce, 3);

    let hash = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_block_hash(1)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    let merkle_root = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_witness_root_by_number(1)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    assert_eq!(hash.as_ref(), &[1u8; 32]);
    assert_eq!(merkle_root.as_ref(), &[2u8; 32]);

    // New L1 block â„–2
    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_hash: [2u8; 32],
            da_slot_height: 2,
            da_slot_txs_commitment: [3u8; 32],
            pre_state_root: [10u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![],
            l1_fee_rate,
            timestamp: 42,
        },
        &mut working_set,
    );
    {
        let sender_address = generate_address::<C>("sender");
        let sequencer_address = generate_address::<C>("sequencer");
        let context = C::new(sender_address, sequencer_address, 1);

        let deploy_message =
            create_contract_message_with_fee(&dev_signer, 0, BlockHashContract::default(), 1);

        evm.call(
            CallMessage {
                txs: vec![deploy_message],
            },
            &context,
            &mut working_set,
        )
        .unwrap();
    }
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    let system_account = evm.accounts.get(&SYSTEM_SIGNER, &mut working_set).unwrap();
    // The system caller balance is unchanged(if exists)/or should be 0
    assert_eq!(system_account.info.balance, U256::from(0));
    assert_eq!(system_account.info.nonce, 4);

    let receipts: Vec<_> = evm
        .receipts
        .iter(&mut working_set.accessory_state())
        .collect();
    assert_eq!(receipts.len(), 5); // 3 from first L2 block + 2 from second L2 block
    let receipts = receipts[3..].to_vec();

    assert_eq!(receipts,
        [
            Receipt { // BitcoinLightClient::setBlockInfo(U256, U256)
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 73581,
                    logs: vec![
                        Log {
                            address: BitcoinLightClient::address(),
                            topics: vec![b256!("32eff959e2e8d1609edc4b39ccf75900aa6c1da5719f8432752963fdf008234f")],
                            data: Bytes::from_static(&hex!("000000000000000000000000000000000000000000000000000000000000000302020202020202020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030303")),
                        }
                    ]
                },
                gas_used: 73581,
                log_index_start: 0,
                diff_size: 348,
            },
            Receipt {
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 187816,
                    logs: vec![]
                },
                gas_used: 114235,
                log_index_start: 1,
                diff_size: 477,
            },
        ]
    );

    let coinbase_account = evm
        .accounts
        .get(&config.coinbase, &mut working_set)
        .unwrap();
    assert_eq!(coinbase_account.info.balance, U256::from(114235 + 477));

    let hash = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_block_hash(2)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    let merkle_root = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_witness_root_by_number(2)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    assert_eq!(hash.as_ref(), &[2u8; 32]);
    assert_eq!(merkle_root.as_ref(), &[3u8; 32]);
}

#[test]
fn test_sys_tx_gas_usage_effect_on_block_gas_limit() {
    // This test also tests evm checking gas usage and not just the tx gas limit when including txs in block after checking available block limit
    // For example txs below have 1_000_000 gas limit, the block used to stuck at 29_030_000 gas usage but now can utilize the whole block gas limit
    let (mut config, dev_signer, contract_addr) = get_evm_config_starting_base_fee(
        U256::from_str("100000000000000000000").unwrap(),
        Some(ETHEREUM_BLOCK_GAS_LIMIT),
        1,
    );

    config_push_contracts(&mut config);

    let (evm, mut working_set) = get_evm(&config);
    let l1_fee_rate = 0;

    let sender_address = generate_address::<C>("sender");
    let sequencer_address = generate_address::<C>("sequencer");
    let context = C::new(sender_address, sequencer_address, 1);

    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_hash: [5u8; 32],
            da_slot_height: 1,
            da_slot_txs_commitment: [42u8; 32],
            pre_state_root: [10u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![],
            l1_fee_rate: 1,
            timestamp: 0,
        },
        &mut working_set,
    );
    {
        // deploy logs contract
        evm.call(
            CallMessage {
                txs: vec![create_contract_message(
                    &dev_signer,
                    0,
                    LogsContract::default(),
                )],
            },
            &context,
            &mut working_set,
        )
        .unwrap();
    }
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_hash: [10u8; 32],
            da_slot_height: 2,
            da_slot_txs_commitment: [43u8; 32],
            pre_state_root: [10u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![],
            l1_fee_rate,
            timestamp: 0,
        },
        &mut working_set,
    );
    {
        let context = C::new(sender_address, sequencer_address, 2);

        let sys_tx_gas_usage = evm.get_pending_txs_cumulative_gas_used(&mut working_set);
        assert_eq!(sys_tx_gas_usage, 73581);

        let mut rlp_transactions = Vec::new();

        // Check: Given now we also push bridge contract, is the following calculation correct?

        // the amount of gas left is 30_000_000 - 73581 = 29926419
        // send barely enough gas to reach the limit
        // one publish event message is 26388 gas
        // 29926419 / 26388 = 1134.09
        // so there cannot be more than 1134 messages
        for i in 0..11350 {
            rlp_transactions.push(publish_event_message(
                contract_addr,
                &dev_signer,
                i + 1,
                "hello".to_string(),
            ));
        }

        evm.call(
            CallMessage {
                txs: rlp_transactions,
            },
            &context,
            &mut working_set,
        )
        .unwrap();
    }
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    let block = evm
        .get_block_by_number(Some(BlockNumberOrTag::Latest), None, &mut working_set)
        .unwrap()
        .unwrap();

    assert_eq!(block.header.gas_limit, U256::from(ETHEREUM_BLOCK_GAS_LIMIT));
    assert!(block.header.gas_used <= block.header.gas_limit);

    // In total there should only be 1135 transactions 1 is system tx others are contract calls
    assert!(
        block.transactions.hashes().len() == 1135,
        "Some transactions should be dropped because of gas limit"
    );
}

#[test]
fn test_bridge() {
    let (mut config, _, _) =
        get_evm_config_starting_base_fee(U256::from_str("1000000").unwrap(), None, 1);

    config_push_contracts(&mut config);

    let (evm, mut working_set) = get_evm(&config);

    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_height: 2,
            da_slot_hash: [2u8; 32],
            da_slot_txs_commitment: [
                0x46, 0xb8, 0xe9, 0x6a, 0x97, 0x98, 0x74, 0x2f, 0x3d, 0x55, 0x5a, 0xd1, 0xd1, 0xb0,
                0xc3, 0x1a, 0x29, 0xfa, 0xc5, 0xe0, 0xd1, 0x33, 0xa4, 0x41, 0x26, 0xa8, 0xb3, 0xca,
                0x02, 0x07, 0x7e, 0xce,
            ],
            pre_state_root: [1u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![[
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 4, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 1, 212, 214, 197,
                201, 69, 131, 160, 80, 93, 208, 193, 235, 100, 118, 11, 162, 166, 163, 145, 246,
                218, 49, 100, 9, 78, 216, 188, 172, 25, 11, 125, 108, 0, 0, 0, 0, 0, 253, 255, 255,
                255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                130, 3, 120, 220, 245, 5, 0, 0, 0, 0, 34, 81, 32, 8, 27, 181, 92, 132, 91, 27, 20,
                184, 88, 10, 2, 70, 118, 77, 83, 212, 170, 87, 150, 69, 198, 117, 104, 216, 55, 92,
                113, 246, 135, 162, 206, 74, 1, 0, 0, 0, 0, 0, 0, 34, 0, 32, 52, 10, 132, 127, 42,
                137, 13, 32, 143, 108, 122, 33, 129, 17, 22, 19, 75, 210, 176, 28, 193, 212, 106,
                153, 158, 97, 218, 25, 95, 107, 138, 59, 74, 1, 0, 0, 0, 0, 0, 0, 34, 0, 32, 74,
                232, 21, 114, 240, 110, 27, 136, 253, 92, 237, 122, 26, 0, 9, 69, 67, 46, 131, 225,
                85, 30, 111, 114, 30, 233, 192, 11, 140, 195, 50, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 76, 7, 64,
                181, 0, 22, 78, 209, 73, 49, 85, 139, 111, 16, 19, 80, 189, 137, 109, 142, 247,
                181, 33, 82, 104, 174, 198, 250, 151, 98, 79, 151, 212, 233, 33, 249, 84, 195, 98,
                218, 203, 112, 104, 117, 186, 134, 40, 7, 152, 244, 161, 65, 116, 93, 9, 68, 77,
                143, 106, 98, 72, 48, 70, 188, 30, 135, 98, 64, 37, 183, 86, 185, 115, 166, 249,
                106, 96, 253, 225, 231, 69, 118, 95, 251, 93, 75, 250, 251, 211, 56, 14, 0, 68,
                223, 176, 196, 197, 155, 186, 151, 61, 8, 6, 148, 42, 113, 132, 88, 105, 111, 44,
                9, 247, 193, 164, 246, 114, 71, 157, 123, 143, 103, 141, 255, 7, 186, 223, 84, 106,
                179, 210, 0, 64, 69, 215, 234, 136, 195, 13, 109, 160, 244, 192, 140, 128, 139, 43,
                114, 192, 40, 51, 160, 188, 31, 68, 217, 1, 149, 78, 103, 30, 83, 26, 51, 226, 181,
                145, 158, 186, 209, 101, 92, 61, 246, 81, 178, 37, 145, 119, 118, 73, 230, 10, 171,
                7, 184, 80, 113, 18, 223, 43, 61, 161, 195, 236, 101, 253, 64, 31, 131, 182, 154,
                252, 134, 2, 64, 228, 134, 175, 67, 124, 9, 148, 159, 122, 154, 183, 167, 149, 9,
                13, 60, 232, 168, 142, 243, 164, 96, 222, 86, 192, 237, 59, 202, 136, 140, 174, 34,
                227, 20, 149, 225, 188, 210, 33, 72, 213, 24, 92, 191, 5, 48, 43, 29, 145, 0, 150,
                209, 132, 20, 54, 143, 64, 11, 110, 116, 23, 202, 122, 95, 63, 239, 210, 33, 8,
                114, 136, 171, 190, 243, 90, 169, 61, 181, 2, 188, 155, 50, 180, 206, 72, 237, 182,
                102, 198, 234, 54, 214, 161, 213, 252, 42, 120, 170, 171, 97, 247, 19, 85, 183,
                129, 111, 127, 225, 91, 179, 53, 92, 86, 114, 15, 126, 178, 125, 108, 168, 163,
                195, 32, 52, 2, 237, 230, 131, 149, 51, 30, 39, 151, 225, 216, 253, 43, 169, 81,
                56, 107, 170, 179, 45, 20, 64, 37, 44, 50, 20, 224, 112, 143, 228, 121, 173, 32,
                193, 140, 89, 52, 128, 244, 245, 90, 63, 215, 97, 124, 157, 246, 227, 218, 188,
                128, 252, 165, 146, 127, 102, 210, 0, 80, 200, 42, 32, 18, 190, 122, 173, 32, 137,
                195, 16, 192, 123, 60, 57, 1, 86, 42, 63, 0, 12, 74, 71, 127, 203, 94, 191, 211,
                98, 222, 61, 7, 160, 191, 249, 39, 242, 145, 19, 1, 173, 32, 103, 222, 104, 248,
                235, 129, 108, 134, 57, 104, 2, 179, 137, 222, 222, 192, 23, 3, 215, 158, 153, 16,
                224, 200, 70, 244, 137, 32, 163, 227, 61, 215, 173, 32, 64, 241, 80, 103, 2, 228,
                0, 184, 209, 174, 210, 222, 5, 191, 119, 110, 109, 118, 2, 55, 138, 176, 131, 74,
                125, 119, 16, 57, 69, 74, 245, 110, 173, 81, 0, 99, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 65, 192, 147, 199, 55, 141, 150, 81, 138,
                117, 68, 136, 33, 196, 247, 200, 244, 186, 231, 206, 96, 248, 4, 208, 61, 31, 6,
                40, 221, 93, 208, 245, 222, 81, 232, 187, 184, 203, 112, 218, 147, 116, 210, 77,
                223, 236, 155, 253, 141, 144, 184, 149, 99, 194, 165, 93, 232, 15, 190, 186, 87,
                192, 162, 222, 27, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 103, 117, 62, 92, 98, 148, 137, 113, 55, 19, 42,
                245, 74, 144, 173, 5, 204, 149, 144, 243, 114, 244, 172, 138, 174, 80, 9, 108, 125,
                224, 129, 207, 191, 197, 45, 17, 170, 40, 154, 223, 64, 66, 107, 88, 156, 249, 115,
                155, 3, 10, 139, 97, 192, 236, 34, 52, 124, 227, 175, 100, 43, 159, 82, 120, 63, 0,
                231, 56, 182, 228, 99, 118, 202, 119, 86, 180, 35, 12, 128, 201, 180, 182, 135, 1,
                184, 31, 105, 14, 0, 209, 223, 36, 116, 78, 93, 135, 42, 101, 200, 11, 253, 84,
                172, 194, 94, 98, 39, 8, 207, 24, 0, 11, 104, 21, 208, 0, 114, 154, 168, 128, 185,
                116, 242, 24, 113, 55, 234,
            ]
            .to_vec()],
            l1_fee_rate: 1,
            timestamp: 0,
        },
        &mut working_set,
    );
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    let recipient_address = address!("0101010101010101010101010101010101010101");
    let recipient_account = evm
        .accounts
        .get(&recipient_address, &mut working_set)
        .unwrap();

    assert_eq!(
        recipient_account.info.balance,
        U256::from_str("0xde0b6b3a7640000").unwrap(),
    );
}

fn config_push_contracts(config: &mut EvmConfig) {
    config.data.push(AccountData::new(
        BitcoinLightClient::address(),
        U256::ZERO,
        Bytes::from_static(&hex!("608060405234801561001057600080fd5b50600436106100a95760003560e01c806357e871e71161007157806357e871e71461014c57806361b207e214610155578063a91d8b3d14610182578063d269a03e146101a2578063d761753e146101b5578063ee82ac5e146101e857600080fd5b80630466efc4146100ae5780630e27bc11146100e15780631f578333146100f657806334cdf78d146101095780634ffd344a14610129575b600080fd5b6100ce6100bc366004610599565b60009081526002602052604090205490565b6040519081526020015b60405180910390f35b6100f46100ef3660046105b2565b610208565b005b6100f4610104366004610599565b610331565b6100ce610117366004610599565b60016020526000908152604090205481565b61013c61013736600461061d565b6103df565b60405190151581526020016100d8565b6100ce60005481565b6100ce610163366004610599565b6000908152600160209081526040808320548352600290915290205490565b6100ce610190366004610599565b60026020526000908152604090205481565b61013c6101b036600461061d565b610405565b6101d073deaddeaddeaddeaddeaddeaddeaddeaddeaddead81565b6040516001600160a01b0390911681526020016100d8565b6100ce6101f6366004610599565b60009081526001602052604090205490565b3373deaddeaddeaddeaddeaddeaddeaddeaddeaddead146102705760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206973206e6f74207468652073797374656d2063616c6c65720060448201526064015b60405180910390fd5b60008054908190036102b65760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b6044820152606401610267565b60008181526001602081905260409091208490556102d5908290610678565b6000908155838152600260209081526040808320859055915482519081529081018590529081018390527f32eff959e2e8d1609edc4b39ccf75900aa6c1da5719f8432752963fdf008234f9060600160405180910390a1505050565b3373deaddeaddeaddeaddeaddeaddeaddeaddeaddead146103945760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206973206e6f74207468652073797374656d2063616c6c6572006044820152606401610267565b600054156103da5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610267565b600055565b6000858152600160205260408120546103fb9086868686610410565b9695505050505050565b60006103fb86868686865b6000858152600260209081526040808320548151601f870184900484028101840190925285825291610463918891849190899089908190840183828082843760009201919091525089925061046e915050565b979650505050505050565b6000838514801561047d575081155b801561048857508251155b15610495575060016104a4565b6104a1858486856104ac565b90505b949350505050565b6000602084516104bc9190610699565b156104c9575060006104a4565b83516000036104da575060006104a4565b818560005b8651811015610549576104f3600284610699565b6001036105175761051061050a8883016020015190565b83610556565b9150610530565b61052d826105288984016020015190565b610556565b91505b60019290921c91610542602082610678565b90506104df565b5090931495945050505050565b6000610562838361056b565b90505b92915050565b60008260005281602052602060006040600060025afa50602060006020600060025afa505060005192915050565b6000602082840312156105ab57600080fd5b5035919050565b600080604083850312156105c557600080fd5b50508035926020909101359150565b60008083601f8401126105e657600080fd5b50813567ffffffffffffffff8111156105fe57600080fd5b60208301915083602082850101111561061657600080fd5b9250929050565b60008060008060006080868803121561063557600080fd5b8535945060208601359350604086013567ffffffffffffffff81111561065a57600080fd5b610666888289016105d4565b96999598509660600135949350505050565b8082018082111561056557634e487b7160e01b600052601160045260246000fd5b6000826106b657634e487b7160e01b600052601260045260246000fd5b50069056fea26469706673582212202fa9b28760396981b6b0d8418d5de50f0783041c49eced580ada3a97fdbcae6f64736f6c63430008190033")),
        0,
        HashMap::new()
    ));

    config.data.push(AccountData::new(
        Bridge::address(),
        U256::from_str("0x115EEC47F6CF7E35000000").unwrap(),
        Bytes::from_static(&hex!("6080604052600436106101355760003560e01c80638e19899e116100ab578063d761753e1161006f578063d761753e1461033a578063dd95c7c614610362578063e30c397814610382578063e613ae00146103a2578063ec6925a7146103bd578063f2fde38b146103d957600080fd5b80638e19899e146102b25780639f963f59146102c5578063b3ab15fb146102e5578063b93780f614610305578063d1c444561461031a57600080fd5b80635e0e5b3e116100fd5780635e0e5b3e14610201578063715018a614610231578063781952a81461024657806379ba50971461025b57806387f8bf56146102705780638da5cb5b1461029257600080fd5b8063158ef93e1461013a57806343e31687146101705780634507fc6914610194578063570ca735146101b657806359c19cee146101ee575b600080fd5b34801561014657600080fd5b5060015461015b90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561017c57600080fd5b5061018660035481565b604051908152602001610167565b3480156101a057600080fd5b506101b46101af366004611ec4565b6103f9565b005b3480156101c257600080fd5b506002546101d6906001600160a01b031681565b6040516001600160a01b039091168152602001610167565b6101b46101fc366004611f4c565b61064f565b34801561020d57600080fd5b5061015b61021c366004611fc1565b60066020526000908152604090205460ff1681565b34801561023d57600080fd5b506101b4610760565b34801561025257600080fd5b50600754610186565b34801561026757600080fd5b506101b46107d6565b34801561027c57600080fd5b5061028561089c565b6040516101679190611fda565b34801561029e57600080fd5b506000546101d6906001600160a01b031681565b6101b46102c0366004611fc1565b61092a565b3480156102d157600080fd5b506101b46102e0366004612029565b6109f4565b3480156102f157600080fd5b506101b461030036600461209d565b610b27565b34801561031157600080fd5b50610285610ba6565b34801561032657600080fd5b50610186610335366004611fc1565b610bb3565b34801561034657600080fd5b506101d673deaddeaddeaddeaddeaddeaddeaddeaddeaddead81565b34801561036e57600080fd5b506101b461037d3660046120b8565b610bd4565b34801561038e57600080fd5b506001546101d6906001600160a01b031681565b3480156103ae57600080fd5b506101d66001603160981b0181565b3480156103c957600080fd5b50610186670de0b6b3a764000081565b3480156103e557600080fd5b506101b46103f436600461209d565b61137a565b3373deaddeaddeaddeaddeaddeaddeaddeaddeaddead146104615760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206973206e6f74207468652073797374656d2063616c6c65720060448201526064015b60405180910390fd5b600154600160a01b900460ff16156104bb5760405162461bcd60e51b815260206004820152601f60248201527f436f6e747261637420697320616c726561647920696e697469616c697a6564006044820152606401610458565b8160000361050b5760405162461bcd60e51b815260206004820152601a60248201527f566572696669657220636f756e742063616e6e6f7420626520300000000000006044820152606401610458565b600085900361055c5760405162461bcd60e51b815260206004820152601e60248201527f4465706f736974207363726970742063616e6e6f7420626520656d70747900006044820152606401610458565b6001805460ff60a01b1916600160a01b179055600461057c868883612195565b50600561058a848683612195565b5060038290556002805473deaddeaddeaddeaddeaddeaddeaddeaddeaddead6001600160a01b03199182168117909255600080549091166001600160a01b0384161781556040805191825260208201929092527ffbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad03910160405180910390a17f89ed79f38bee253aee2fb8d52df0d71b4aaf0843800d093a499a55eeca455c34868686868660405161063f95949392919061227f565b60405180910390a1505050505050565b61066181670de0b6b3a76400006122cf565b34146106a95760405162461bcd60e51b8152602060048201526017602482015276125b9d985b1a59081dda5d1a191c985dc8185b5bdd5b9d604a1b6044820152606401610458565b60075460005b8281101561075a5760078484838181106106cb576106cb6122e6565b835460018101855560009485526020948590209190940292909201359190920155507fc96d1af655ee5eb07357bb1097f3b2f247ea0c4e3cf5f9a5c8449c4f8b64fb6b848483818110610720576107206122e6565b90506020020135828461073391906122fc565b604080519283526020830191909152429082015260600160405180910390a16001016106af565b50505050565b6000546001600160a01b0316331461078a5760405162461bcd60e51b81526004016104589061230f565b600080546001600160a01b03191681556040805182815260208101929092527f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0910160405180910390a1565b6001546001600160a01b031633146108305760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f742070656e64696e67206f776e657200000000006044820152606401610458565b60008054600180546001600160a01b03198084166001600160a01b038084169190911786559116909155604080519190921680825260208201939093527f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091015b60405180910390a150565b600580546108a99061210a565b80601f01602080910402602001604051908101604052809291908181526020018280546108d59061210a565b80156109225780601f106108f757610100808354040283529160200191610922565b820191906000526020600020905b81548152906001019060200180831161090557829003601f168201915b505050505081565b670de0b6b3a7640000341461097b5760405162461bcd60e51b8152602060048201526017602482015276125b9d985b1a59081dda5d1a191c985dc8185b5bdd5b9d604a1b6044820152606401610458565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68881018290556040805183815260208101839052428183015290517fc96d1af655ee5eb07357bb1097f3b2f247ea0c4e3cf5f9a5c8449c4f8b64fb6b9181900360600190a15050565b6000546001600160a01b03163314610a1e5760405162461bcd60e51b81526004016104589061230f565b80600003610a6e5760405162461bcd60e51b815260206004820152601a60248201527f566572696669657220636f756e742063616e6e6f7420626520300000000000006044820152606401610458565b6000849003610abf5760405162461bcd60e51b815260206004820152601e60248201527f4465706f736974207363726970742063616e6e6f7420626520656d70747900006044820152606401610458565b6004610acc858783612195565b506005610ada838583612195565b5060038190556040517f89ed79f38bee253aee2fb8d52df0d71b4aaf0843800d093a499a55eeca455c3490610b18908790879087908790879061227f565b60405180910390a15050505050565b6000546001600160a01b03163314610b515760405162461bcd60e51b81526004016104589061230f565b600280546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527ffbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad039101610891565b600480546108a99061210a565b60078181548110610bc357600080fd5b600091825260209091200154905081565b6002546001600160a01b03163314610c2e5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f720000000000006044820152606401610458565b6000610c8c610c40602084018461233c565b610c506040850160208601612366565b610c5d6040860186612390565b610c6a6060880188612390565b610c7760808a018a612390565b610c8760c08c0160a08d0161233c565b611400565b60008181526006602052604090205490915060ff1615610ce45760405162461bcd60e51b81526020600482015260136024820152721ddd1e125908185b1c9958591e481cdc195b9d606a1b6044820152606401610458565b60008181526006602052604090819020805460ff19166001179055610d4990610d0f90840184612390565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144892505050565b610d955760405162461bcd60e51b815260206004820152601d60248201527f56696e206973206e6f742070726f7065726c7920666f726d61747465640000006044820152606401610458565b610ddf610da56060840184612390565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114ec92505050565b610e2b5760405162461bcd60e51b815260206004820152601e60248201527f566f7574206973206e6f742070726f7065726c7920666f726d617474656400006044820152606401610458565b6000610e77610e3d6040850185612390565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061158392505050565b91505080600114610ec35760405162461bcd60e51b815260206004820152601660248201527513db9b1e481bdb99481a5b9c1d5d08185b1b1bddd95960521b6044820152606401610458565b610f0f610ed36080850185612390565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061159a915050565b610f655760405162461bcd60e51b815260206004820152602160248201527f5769746e657373206973206e6f742070726f7065726c7920666f726d617474656044820152601960fa1b6064820152608401610458565b6001603160981b01634ffd344a60e085013584610f8560c0880188612390565b8861010001356040518663ffffffff1660e01b8152600401610fab9594939291906123d7565b602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190612409565b6110385760405162461bcd60e51b815260206004820152601b60248201527f5472616e73616374696f6e206973206e6f7420696e20626c6f636b00000000006044820152606401610458565b600061108461104a6080860186612390565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611610915050565b9050600061109182611583565b91505060035460026110a391906122fc565b81146110e95760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207769746e657373206974656d7360581b6044820152606401610458565b60006110f7836003546116f3565b90506000600480546111089061210a565b9150600090506111198382846118bd565b90506111af816004805461112c9061210a565b80601f01602080910402602001604051908101604052809291908181526020018280546111589061210a565b80156111a55780601f1061117a576101008083540402835291602001916111a5565b820191906000526020600020905b81548152906001019060200180831161118857829003601f168201915b5050505050611981565b6111f45760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590819195c1bdcda5d081cd8dc9a5c1d60521b6044820152606401610458565b60006112236112048460146122fc565b61120f8560146122fc565b865161121b919061242b565b8691906118bd565b9050611236816005805461112c9061210a565b61127a5760405162461bcd60e51b8152602060048201526015602482015274092dcecc2d8d2c840e6c6e4d2e0e840e6eaccccd2f605b1b6044820152606401610458565b600061128585611a43565b604080518b81526001600160a01b0383166020820152428183015290519192507f182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac919081900360600190a16000816001600160a01b0316670de0b6b3a764000060405160006040518083038185875af1925050503d8060008114611325576040519150601f19603f3d011682016040523d82523d6000602084013e61132a565b606091505b505090508061136d5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610458565b5050505050505050505050565b6000546001600160a01b031633146113a45760405162461bcd60e51b81526004016104589061230f565b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789101610891565b600061143a8a8a8a8a8a8a8a8a8a6040516020016114269998979695949392919061243e565b604051602081830303815290604052611a79565b9a9950505050505050505050565b600080600061145684611583565b9092509050801580611469575060001982145b15611478575060009392505050565b60006114858360016122fc565b905060005b828110156114df57855182106114a65750600095945050505050565b60006114b28784611aa0565b905060001981036114ca575060009695505050505050565b6114d481846122fc565b92505060010161148a565b5093519093149392505050565b60008060006114fa84611583565b909250905080158061150d575060001982145b1561151c575060009392505050565b60006115298360016122fc565b905060005b828110156114df578551821061154a5750600095945050505050565b60006115568784611ae9565b9050600019810361156e575060009695505050505050565b61157881846122fc565b92505060010161152e565b600080611591836000611b4d565b91509150915091565b6000816000036115ac5750600061160a565b6000805b8381101561160357845182106115cb5760009250505061160a565b60006115d78684611cf1565b905060001981036115ee576000935050505061160a565b6115f881846122fc565b9250506001016115b0565b5083511490505b92915050565b606060008060005b848110156116895761162a8683611cf1565b925060001983036116755760405162461bcd60e51b815260206004820152601560248201527442616420566172496e7420696e207769746e65737360581b6044820152606401610458565b61167f83836122fc565b9150600101611618565b506116948582611cf1565b915060001982036116df5760405162461bcd60e51b815260206004820152601560248201527442616420566172496e7420696e207769746e65737360581b6044820152606401610458565b6116ea8582846118bd565b95945050505050565b606060008061170185611583565b9092509050600182016117615760405162461bcd60e51b815260206004820152602260248201527f52656164206f76657272756e20647572696e6720566172496e742070617273696044820152616e6760f01b6064820152608401610458565b8084106117a35760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610458565b6000806117b18460016122fc565b905060005b8681101561183c576117c88883611b4d565b9095509250600183016118125760405162461bcd60e51b815260206004820152601260248201527142616420566172496e7420696e206974656d60701b6044820152606401610458565b8261181e8660016122fc565b61182891906122fc565b61183290836122fc565b91506001016117b6565b506118478782611b4d565b9094509150600182016118915760405162461bcd60e51b815260206004820152601260248201527142616420566172496e7420696e206974656d60701b6044820152606401610458565b6118b28161189f86856122fc565b6118aa9060016122fc565b8991906118bd565b979650505050505050565b6060816000036118dc575060408051602081019091526000815261197a565b60006118e883856122fc565b905083811180156118fa575080855110155b61193c5760405162461bcd60e51b8152602060048201526013602482015272536c696365206f7574206f6620626f756e647360681b6044820152606401610458565b604051915082604083010160405282825283850182038460208701018481015b808210156119755781518383015260208201915061195c565b505050505b9392505050565b600081518351146119cb5760405162461bcd60e51b8152602060048201526014602482015273098cadccee8d0e640c8de40dcdee840dac2e8c6d60631b6044820152606401610458565b825160005b81811015611a38578381815181106119ea576119ea6122e6565b602001015160f81c60f81b6001600160f81b031916858281518110611a1157611a116122e6565b01602001516001600160f81b03191614611a305760009250505061160a565b6001016119d0565b506001949350505050565b60008060048054611a539061210a565b915060009050611a65848360146118bd565b611a6e906124a6565b60601c949350505050565b60006020600083516020850160025afa50602060006020600060025afa5050600051919050565b6000806000611aaf8585611d8f565b909250905060018201611ac8576000199250505061160a565b80611ad48360256122fc565b611ade91906122fc565b6116ea9060046122fc565b6000611af68260096122fc565b83511015611b07575060001961160a565b600080611b1e85611b198660086122fc565b611b4d565b909250905060018201611b37576000199250505061160a565b80611b438360096122fc565b6116ea91906122fc565b6000806000611b5c8585611dd1565b90508060ff16600003611b91576000858581518110611b7d57611b7d6122e6565b016020015190935060f81c9150611cea9050565b83611b9d8260016124e2565b60ff16611baa91906122fc565b85511015611bc15760001960009250925050611cea565b60008160ff16600203611c0557611bfa611be6611bdf8760016122fc565b8890611e57565b62ffff0060e882901c1660f89190911c1790565b61ffff169050611ce0565b8160ff16600403611c5457611c47611c21611bdf8760016122fc565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b63ffffffff169050611ce0565b8160ff16600803611ce057611cd3611c70611bdf8760016122fc565b60c01c64ff000000ff600882811c91821665ff000000ff009390911b92831617601090811b67ffffffffffffffff1666ff00ff00ff00ff9290921667ff00ff00ff00ff009093169290921790911c65ffff0000ffff1617602081811c91901b1790565b67ffffffffffffffff1690505b60ff909116925090505b9250929050565b6000806000611d008585611b4d565b909250905060018201611d19576000199250505061160a565b600080611d278460016122fc565b905060005b83811015611d8457611d3e8883611b4d565b909550925060018301611d5a576000199550505050505061160a565b82611d668660016122fc565b611d7091906122fc565b611d7a90836122fc565b9150600101611d2c565b509695505050505050565b600080611d9d8360256122fc565b84511015611db2575060001990506000611cea565b600080611dc486611b198760246122fc565b9097909650945050505050565b6000828281518110611de557611de56122e6565b016020015160f81c60ff03611dfc5750600861160a565b828281518110611e0e57611e0e6122e6565b016020015160f81c60fe03611e255750600461160a565b828281518110611e3757611e376122e6565b016020015160f81c60fd03611e4e5750600261160a565b50600092915050565b600061197a8383016020015190565b60008083601f840112611e7857600080fd5b50813567ffffffffffffffff811115611e9057600080fd5b602083019150836020828501011115611cea57600080fd5b80356001600160a01b0381168114611ebf57600080fd5b919050565b60008060008060008060808789031215611edd57600080fd5b863567ffffffffffffffff80821115611ef557600080fd5b611f018a838b01611e66565b90985096506020890135915080821115611f1a57600080fd5b50611f2789828a01611e66565b90955093505060408701359150611f4060608801611ea8565b90509295509295509295565b60008060208385031215611f5f57600080fd5b823567ffffffffffffffff80821115611f7757600080fd5b818501915085601f830112611f8b57600080fd5b813581811115611f9a57600080fd5b8660208260051b8501011115611faf57600080fd5b60209290920196919550909350505050565b600060208284031215611fd357600080fd5b5035919050565b60006020808352835180602085015260005b8181101561200857858101830151858201604001528201611fec565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060008060006060868803121561204157600080fd5b853567ffffffffffffffff8082111561205957600080fd5b61206589838a01611e66565b9097509550602088013591508082111561207e57600080fd5b5061208b88828901611e66565b96999598509660400135949350505050565b6000602082840312156120af57600080fd5b61197a82611ea8565b6000602082840312156120ca57600080fd5b813567ffffffffffffffff8111156120e157600080fd5b8201610120818503121561197a57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061211e57607f821691505b60208210810361213e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612190576000816000526020600020601f850160051c8101602086101561216d5750805b601f850160051c820191505b8181101561218c57828155600101612179565b5050505b505050565b67ffffffffffffffff8311156121ad576121ad6120f4565b6121c1836121bb835461210a565b83612144565b6000601f8411600181146121f557600085156121dd5750838201355b600019600387901b1c1916600186901b17835561224f565b600083815260209020601f19861690835b828110156122265786850135825560209485019460019092019101612206565b50868210156122435760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000612293606083018789612256565b82810360208401526122a6818688612256565b9150508260408301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761160a5761160a6122b9565b634e487b7160e01b600052603260045260246000fd5b8082018082111561160a5761160a6122b9565b60208082526013908201527221b0b63632b91034b9903737ba1037bbb732b960691b604082015260600190565b60006020828403121561234e57600080fd5b81356001600160e01b03198116811461197a57600080fd5b60006020828403121561237857600080fd5b81356001600160f01b03198116811461197a57600080fd5b6000808335601e198436030181126123a757600080fd5b83018035915067ffffffffffffffff8211156123c257600080fd5b602001915036819003821315611cea57600080fd5b8581528460208201526080604082015260006123f7608083018587612256565b90508260608301529695505050505050565b60006020828403121561241b57600080fd5b8151801515811461197a57600080fd5b8181038181111561160a5761160a6122b9565b6001600160e01b03198a811682526001600160f01b03198a166004830152600090888a60068501378883016006810160008152888a82375087810190506006810160008152868882375093169390920160068101939093525050600a01979650505050505050565b805160208201516bffffffffffffffffffffffff1980821692919060148310156124da5780818460140360031b1b83161693505b505050919050565b60ff818116838216019081111561160a5761160a6122b956fea2646970667358221220212938f14e0ab805c1b92320c85ef32e04396936de240876f8ab8a604426808164736f6c63430008190033")),
        0,
        HashMap::new(),
    ));
}
