use std::collections::HashMap;
use std::str::FromStr;

use reth_primitives::constants::ETHEREUM_BLOCK_GAS_LIMIT;
use reth_primitives::{address, b256, hex, BlockNumberOrTag, Log};
use reth_rpc_types::{TransactionInput, TransactionRequest};
use revm::primitives::{Bytes, U256};
use sov_modules_api::default_context::DefaultContext;
use sov_modules_api::hooks::HookSoftConfirmationInfo;
use sov_modules_api::utils::generate_address;
use sov_modules_api::{Context, Module, StateMapAccessor, StateVecAccessor};

use crate::call::CallMessage;
use crate::evm::primitive_types::Receipt;
use crate::evm::system_contracts::BitcoinLightClient;
use crate::smart_contracts::{BlockHashContract, LogsContract};
use crate::system_contracts::Bridge;
use crate::tests::call_tests::{
    create_contract_message, create_contract_message_with_fee, get_evm_config_starting_base_fee,
    publish_event_message,
};
use crate::tests::utils::get_evm;
use crate::{AccountData, EvmConfig, SYSTEM_SIGNER};

type C = DefaultContext;

#[test]
fn test_sys_bitcoin_light_client() {
    let (mut config, dev_signer, _) =
        get_evm_config_starting_base_fee(U256::from_str("1000000").unwrap(), None, 1);

    config_push_contracts(&mut config);

    let (evm, mut working_set) = get_evm(&config);

    assert_eq!(
        evm.receipts
            .iter(&mut working_set.accessory_state())
            .collect::<Vec<_>>(),
        [
            Receipt { // BitcoinLightClient::initializeBlockNumber(U256)
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 43615,
                    logs: vec![]
                },
                gas_used: 43615,
                log_index_start: 0,
                diff_size: 220,
            },
            Receipt { // BitcoinLightClient::setBlockInfo(U256, U256)
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 117196,
                    logs: vec![
                        Log {
                            address: BitcoinLightClient::address(),
                            topics: vec![b256!("32eff959e2e8d1609edc4b39ccf75900aa6c1da5719f8432752963fdf008234f")],
                            data: Bytes::from_static(&hex!("000000000000000000000000000000000000000000000000000000000000000201010101010101010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020202020202020202020202")),
                        }
                    ]
                },
                gas_used: 73581,
                log_index_start: 0,
                diff_size: 348,
            },
            Receipt {
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 415811,
                    logs: vec![
                        Log {
                            address: Bridge::address(),
                            topics: vec![b256!("fbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad03")],
                            data: Bytes::from_static(&hex!("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddeaddead")),
                        },
                        Log {
                            address: Bridge::address(),
                            topics: vec![b256!("89ed79f38bee253aee2fb8d52df0d71b4aaf0843800d093a499a55eeca455c34")],
                            data: Bytes::from_static(&hex!("00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000b5d2205daf577048c5e5a9a75d0a924ed03e226c3304f4a2f01c65ca1dab73522e6b8bad206228eba653cf1819bcfc1bc858630e5ae373eec1a9924322a5fe8445c5e76027ad201521d65f64be3f71b71ca462220f13c77b251027f6ca443a483353a96fbce222ad200fabeed269694ee83d9b3343a571202e68af65d05feda61dbed0c4bdb256a6eaad2000326d6f721c03dc5f1d8817d8f8ee890a95a2eeda0d4d9a01b1cc9b7b1b724dac006306636974726561140000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0800000000000f42406800000000000000000000000000000000000000000000"))
                        }
                    ]
                },
                gas_used: 298615,
                log_index_start: 1,
                diff_size: 924,
            }
        ]
    );

    let l1_fee_rate = 1;

    let system_account = evm.accounts.get(&SYSTEM_SIGNER, &mut working_set).unwrap();
    // The system caller balance is unchanged(if exists)/or should be 0
    assert_eq!(system_account.info.balance, U256::from(0));
    assert_eq!(system_account.info.nonce, 3);

    let hash = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_block_hash(1)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    let merkle_root = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_witness_root_by_number(1)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    assert_eq!(hash.as_ref(), &[1u8; 32]);
    assert_eq!(merkle_root.as_ref(), &[2u8; 32]);

    // New L1 block â„–2
    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_hash: [2u8; 32],
            da_slot_height: 2,
            da_slot_txs_commitment: [3u8; 32],
            pre_state_root: [10u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![],
            l1_fee_rate,
            timestamp: 42,
        },
        &mut working_set,
    );
    {
        let sender_address = generate_address::<C>("sender");
        let sequencer_address = generate_address::<C>("sequencer");
        let context = C::new(sender_address, sequencer_address, 1);

        let deploy_message =
            create_contract_message_with_fee(&dev_signer, 0, BlockHashContract::default(), 1);

        evm.call(
            CallMessage {
                txs: vec![deploy_message],
            },
            &context,
            &mut working_set,
        )
        .unwrap();
    }
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    let system_account = evm.accounts.get(&SYSTEM_SIGNER, &mut working_set).unwrap();
    // The system caller balance is unchanged(if exists)/or should be 0
    assert_eq!(system_account.info.balance, U256::from(0));
    assert_eq!(system_account.info.nonce, 4);

    let receipts: Vec<_> = evm
        .receipts
        .iter(&mut working_set.accessory_state())
        .collect();
    assert_eq!(receipts.len(), 5); // 3 from first L2 block + 2 from second L2 block
    let receipts = receipts[3..].to_vec();

    assert_eq!(receipts,
        [
            Receipt { // BitcoinLightClient::setBlockInfo(U256, U256)
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 73581,
                    logs: vec![
                        Log {
                            address: BitcoinLightClient::address(),
                            topics: vec![b256!("32eff959e2e8d1609edc4b39ccf75900aa6c1da5719f8432752963fdf008234f")],
                            data: Bytes::from_static(&hex!("000000000000000000000000000000000000000000000000000000000000000302020202020202020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030303")),
                        }
                    ]
                },
                gas_used: 73581,
                log_index_start: 0,
                diff_size: 348,
            },
            Receipt {
                receipt: reth_primitives::Receipt {
                    tx_type: reth_primitives::TxType::Eip1559,
                    success: true,
                    cumulative_gas_used: 187816,
                    logs: vec![]
                },
                gas_used: 114235,
                log_index_start: 1,
                diff_size: 477,
            },
        ]
    );

    let coinbase_account = evm
        .accounts
        .get(&config.coinbase, &mut working_set)
        .unwrap();
    assert_eq!(coinbase_account.info.balance, U256::from(114235 + 477));

    let hash = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_block_hash(2)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    let merkle_root = evm
        .get_call(
            TransactionRequest {
                to: Some(BitcoinLightClient::address()),
                input: TransactionInput::new(BitcoinLightClient::get_witness_root_by_number(2)),
                ..Default::default()
            },
            None,
            None,
            None,
            &mut working_set,
        )
        .unwrap();

    assert_eq!(hash.as_ref(), &[2u8; 32]);
    assert_eq!(merkle_root.as_ref(), &[3u8; 32]);
}

#[test]
fn test_sys_tx_gas_usage_effect_on_block_gas_limit() {
    // This test also tests evm checking gas usage and not just the tx gas limit when including txs in block after checking available block limit
    // For example txs below have 1_000_000 gas limit, the block used to stuck at 29_030_000 gas usage but now can utilize the whole block gas limit
    let (mut config, dev_signer, contract_addr) = get_evm_config_starting_base_fee(
        U256::from_str("100000000000000000000").unwrap(),
        Some(ETHEREUM_BLOCK_GAS_LIMIT),
        1,
    );

    config_push_contracts(&mut config);

    let (evm, mut working_set) = get_evm(&config);
    let l1_fee_rate = 0;

    let sender_address = generate_address::<C>("sender");
    let sequencer_address = generate_address::<C>("sequencer");
    let context = C::new(sender_address, sequencer_address, 1);

    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_hash: [5u8; 32],
            da_slot_height: 1,
            da_slot_txs_commitment: [42u8; 32],
            pre_state_root: [10u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![],
            l1_fee_rate: 1,
            timestamp: 0,
        },
        &mut working_set,
    );
    {
        // deploy logs contract
        evm.call(
            CallMessage {
                txs: vec![create_contract_message(
                    &dev_signer,
                    0,
                    LogsContract::default(),
                )],
            },
            &context,
            &mut working_set,
        )
        .unwrap();
    }
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_hash: [10u8; 32],
            da_slot_height: 2,
            da_slot_txs_commitment: [43u8; 32],
            pre_state_root: [10u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![],
            l1_fee_rate,
            timestamp: 0,
        },
        &mut working_set,
    );
    {
        let context = C::new(sender_address, sequencer_address, 2);

        let sys_tx_gas_usage = evm.get_pending_txs_cumulative_gas_used(&mut working_set);
        assert_eq!(sys_tx_gas_usage, 73581);

        let mut rlp_transactions = Vec::new();

        // Check: Given now we also push bridge contract, is the following calculation correct?

        // the amount of gas left is 30_000_000 - 73581 = 29926419
        // send barely enough gas to reach the limit
        // one publish event message is 26388 gas
        // 29926419 / 26388 = 1134.09
        // so there cannot be more than 1134 messages
        for i in 0..11350 {
            rlp_transactions.push(publish_event_message(
                contract_addr,
                &dev_signer,
                i + 1,
                "hello".to_string(),
            ));
        }

        evm.call(
            CallMessage {
                txs: rlp_transactions,
            },
            &context,
            &mut working_set,
        )
        .unwrap();
    }
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    let block = evm
        .get_block_by_number(Some(BlockNumberOrTag::Latest), None, &mut working_set)
        .unwrap()
        .unwrap();

    assert_eq!(block.header.gas_limit, U256::from(ETHEREUM_BLOCK_GAS_LIMIT));
    assert!(block.header.gas_used <= block.header.gas_limit);

    // In total there should only be 1135 transactions 1 is system tx others are contract calls
    assert!(
        block.transactions.hashes().len() == 1135,
        "Some transactions should be dropped because of gas limit"
    );
}

#[test]
fn test_bridge() {
    let (mut config, _, _) =
        get_evm_config_starting_base_fee(U256::from_str("1000000").unwrap(), None, 1);

    config_push_contracts(&mut config);

    let (evm, mut working_set) = get_evm(&config);

    evm.begin_soft_confirmation_hook(
        &HookSoftConfirmationInfo {
            da_slot_height: 2,
            da_slot_hash: [2u8; 32],
            da_slot_txs_commitment: [
                136, 147, 225, 201, 35, 145, 64, 167, 182, 140, 185, 55, 22, 224, 150, 42, 51, 86,
                214, 251, 181, 122, 169, 246, 188, 29, 186, 32, 227, 33, 199, 38,
            ],
            pre_state_root: [1u8; 32].to_vec(),
            pub_key: vec![],
            deposit_data: vec![[
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 1, 196, 196, 205, 156,
                93, 62, 54, 134, 133, 188, 6, 17, 153, 42, 62, 155, 138, 8, 111, 222, 48, 192, 86,
                41, 210, 202, 111, 100, 49, 6, 36, 123, 0, 0, 0, 0, 0, 253, 255, 255, 255, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 2, 197, 63,
                15, 0, 0, 0, 0, 0, 34, 81, 32, 225, 85, 228, 181, 8, 114, 26, 130, 4, 159, 125,
                249, 18, 119, 121, 134, 147, 142, 99, 173, 85, 230, 58, 42, 39, 210, 102, 158, 156,
                54, 47, 183, 74, 1, 0, 0, 0, 0, 0, 0, 34, 0, 32, 74, 232, 21, 114, 240, 110, 27,
                136, 253, 92, 237, 122, 26, 0, 9, 69, 67, 46, 131, 225, 85, 30, 111, 114, 30, 233,
                192, 11, 140, 195, 50, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 91, 7, 64, 85, 100,
                226, 121, 160, 231, 130, 160, 201, 56, 39, 35, 161, 143, 216, 21, 211, 206, 127,
                229, 78, 29, 6, 86, 241, 85, 191, 62, 174, 148, 71, 7, 97, 25, 170, 78, 173, 238,
                251, 184, 7, 3, 139, 103, 184, 9, 84, 28, 37, 39, 39, 91, 248, 166, 240, 149, 245,
                51, 48, 45, 10, 151, 90, 134, 64, 58, 4, 251, 18, 243, 51, 241, 78, 218, 137, 248,
                84, 193, 73, 6, 249, 29, 144, 62, 120, 43, 235, 170, 173, 3, 241, 236, 171, 253,
                71, 17, 237, 81, 214, 38, 47, 206, 119, 2, 116, 56, 203, 107, 84, 255, 102, 133,
                42, 245, 35, 173, 250, 41, 110, 193, 18, 121, 214, 157, 81, 81, 115, 91, 237, 64,
                21, 17, 223, 104, 155, 182, 45, 200, 209, 237, 114, 78, 88, 157, 251, 106, 70, 76,
                150, 27, 223, 254, 87, 62, 121, 250, 18, 141, 166, 53, 181, 63, 41, 28, 81, 51, 20,
                84, 115, 122, 154, 139, 187, 182, 208, 212, 16, 122, 183, 103, 149, 223, 86, 216,
                191, 246, 117, 102, 59, 111, 120, 22, 223, 62, 64, 253, 145, 239, 196, 249, 255,
                135, 5, 208, 64, 144, 150, 213, 166, 66, 98, 4, 23, 151, 165, 220, 201, 209, 179,
                201, 162, 185, 98, 0, 228, 44, 29, 230, 117, 232, 11, 123, 162, 71, 201, 73, 125,
                209, 236, 189, 139, 56, 160, 205, 48, 238, 29, 185, 43, 229, 103, 117, 247, 252,
                85, 166, 29, 59, 232, 64, 189, 1, 191, 87, 25, 32, 77, 193, 98, 33, 84, 159, 168,
                209, 181, 157, 80, 130, 164, 59, 101, 196, 190, 247, 124, 131, 53, 156, 111, 105,
                196, 18, 8, 177, 1, 118, 217, 178, 150, 165, 172, 205, 126, 106, 54, 246, 54, 95,
                47, 16, 155, 156, 123, 135, 135, 4, 44, 241, 144, 188, 76, 181, 157, 173, 210, 32,
                93, 175, 87, 112, 72, 197, 229, 169, 167, 93, 10, 146, 78, 208, 62, 34, 108, 51, 4,
                244, 162, 240, 28, 101, 202, 29, 171, 115, 82, 46, 107, 139, 173, 32, 98, 40, 235,
                166, 83, 207, 24, 25, 188, 252, 27, 200, 88, 99, 14, 90, 227, 115, 238, 193, 169,
                146, 67, 34, 165, 254, 132, 69, 197, 231, 96, 39, 173, 32, 21, 33, 214, 95, 100,
                190, 63, 113, 183, 28, 164, 98, 34, 15, 19, 199, 123, 37, 16, 39, 246, 202, 68, 58,
                72, 51, 83, 169, 111, 188, 226, 34, 173, 32, 15, 171, 238, 210, 105, 105, 78, 232,
                61, 155, 51, 67, 165, 113, 32, 46, 104, 175, 101, 208, 95, 237, 166, 29, 190, 208,
                196, 189, 178, 86, 166, 234, 173, 32, 0, 50, 109, 111, 114, 28, 3, 220, 95, 29,
                136, 23, 216, 248, 238, 137, 10, 149, 162, 238, 218, 13, 77, 154, 1, 177, 204, 155,
                123, 27, 114, 77, 172, 0, 99, 6, 99, 105, 116, 114, 101, 97, 20, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 15, 66, 64, 104, 65,
                193, 147, 199, 55, 141, 150, 81, 138, 117, 68, 136, 33, 196, 247, 200, 244, 186,
                231, 206, 96, 248, 4, 208, 61, 31, 6, 40, 221, 93, 208, 245, 222, 81, 15, 41, 81,
                255, 251, 84, 130, 89, 213, 171, 185, 243, 81, 190, 143, 148, 3, 28, 156, 232, 140,
                232, 56, 180, 13, 124, 236, 124, 96, 110, 12, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0,
            ]
            .to_vec()],
            l1_fee_rate: 1,
            timestamp: 0,
        },
        &mut working_set,
    );
    evm.end_soft_confirmation_hook(&mut working_set);
    evm.finalize_hook(&[99u8; 32].into(), &mut working_set.accessory_state());

    let recipient_address = address!("0101010101010101010101010101010101010101");
    let recipient_account = evm
        .accounts
        .get(&recipient_address, &mut working_set)
        .unwrap();

    assert_eq!(
        recipient_account.info.balance,
        U256::from_str("0x2386f26fc10000").unwrap(),
    );
}

fn config_push_contracts(config: &mut EvmConfig) {
    config.data.push(AccountData::new(
        BitcoinLightClient::address(),
        U256::ZERO,
        Bytes::from_static(&hex!("608060405234801561001057600080fd5b50600436106100a95760003560e01c806357e871e71161007157806357e871e71461014c57806361b207e214610155578063a91d8b3d14610182578063d269a03e146101a2578063d761753e146101b5578063ee82ac5e146101e857600080fd5b80630466efc4146100ae5780630e27bc11146100e15780631f578333146100f657806334cdf78d146101095780634ffd344a14610129575b600080fd5b6100ce6100bc366004610599565b60009081526002602052604090205490565b6040519081526020015b60405180910390f35b6100f46100ef3660046105b2565b610208565b005b6100f4610104366004610599565b610331565b6100ce610117366004610599565b60016020526000908152604090205481565b61013c61013736600461061d565b6103df565b60405190151581526020016100d8565b6100ce60005481565b6100ce610163366004610599565b6000908152600160209081526040808320548352600290915290205490565b6100ce610190366004610599565b60026020526000908152604090205481565b61013c6101b036600461061d565b610405565b6101d073deaddeaddeaddeaddeaddeaddeaddeaddeaddead81565b6040516001600160a01b0390911681526020016100d8565b6100ce6101f6366004610599565b60009081526001602052604090205490565b3373deaddeaddeaddeaddeaddeaddeaddeaddeaddead146102705760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206973206e6f74207468652073797374656d2063616c6c65720060448201526064015b60405180910390fd5b60008054908190036102b65760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b6044820152606401610267565b60008181526001602081905260409091208490556102d5908290610678565b6000908155838152600260209081526040808320859055915482519081529081018590529081018390527f32eff959e2e8d1609edc4b39ccf75900aa6c1da5719f8432752963fdf008234f9060600160405180910390a1505050565b3373deaddeaddeaddeaddeaddeaddeaddeaddeaddead146103945760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206973206e6f74207468652073797374656d2063616c6c6572006044820152606401610267565b600054156103da5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610267565b600055565b6000858152600160205260408120546103fb9086868686610410565b9695505050505050565b60006103fb86868686865b6000858152600260209081526040808320548151601f870184900484028101840190925285825291610463918891849190899089908190840183828082843760009201919091525089925061046e915050565b979650505050505050565b6000838514801561047d575081155b801561048857508251155b15610495575060016104a4565b6104a1858486856104ac565b90505b949350505050565b6000602084516104bc9190610699565b156104c9575060006104a4565b83516000036104da575060006104a4565b818560005b8651811015610549576104f3600284610699565b6001036105175761051061050a8883016020015190565b83610556565b9150610530565b61052d826105288984016020015190565b610556565b91505b60019290921c91610542602082610678565b90506104df565b5090931495945050505050565b6000610562838361056b565b90505b92915050565b60008260005281602052602060006040600060025afa50602060006020600060025afa505060005192915050565b6000602082840312156105ab57600080fd5b5035919050565b600080604083850312156105c557600080fd5b50508035926020909101359150565b60008083601f8401126105e657600080fd5b50813567ffffffffffffffff8111156105fe57600080fd5b60208301915083602082850101111561061657600080fd5b9250929050565b60008060008060006080868803121561063557600080fd5b8535945060208601359350604086013567ffffffffffffffff81111561065a57600080fd5b610666888289016105d4565b96999598509660600135949350505050565b8082018082111561056557634e487b7160e01b600052601160045260246000fd5b6000826106b657634e487b7160e01b600052601260045260246000fd5b50069056fea26469706673582212202fa9b28760396981b6b0d8418d5de50f0783041c49eced580ada3a97fdbcae6f64736f6c63430008190033")),
        0,
        HashMap::new()
    ));

    config.data.push(AccountData::new(
        Bridge::address(),
        U256::from_str("0x115EEC47F6CF7E35000000").unwrap(),
        Bytes::from_static(&hex!("6080604052600436106101355760003560e01c80638e19899e116100ab578063d761753e1161006f578063d761753e1461033a578063dd95c7c614610362578063e30c397814610382578063e613ae00146103a2578063ec6925a7146103bd578063f2fde38b146103d857600080fd5b80638e19899e146102b25780639f963f59146102c5578063b3ab15fb146102e5578063b93780f614610305578063d1c444561461031a57600080fd5b80635e0e5b3e116100fd5780635e0e5b3e14610201578063715018a614610231578063781952a81461024657806379ba50971461025b57806387f8bf56146102705780638da5cb5b1461029257600080fd5b8063158ef93e1461013a57806343e31687146101705780634507fc6914610194578063570ca735146101b657806359c19cee146101ee575b600080fd5b34801561014657600080fd5b5060015461015b90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561017c57600080fd5b5061018660035481565b604051908152602001610167565b3480156101a057600080fd5b506101b46101af366004611ec0565b6103f8565b005b3480156101c257600080fd5b506002546101d6906001600160a01b031681565b6040516001600160a01b039091168152602001610167565b6101b46101fc366004611f48565b61064e565b34801561020d57600080fd5b5061015b61021c366004611fbd565b60066020526000908152604090205460ff1681565b34801561023d57600080fd5b506101b461075e565b34801561025257600080fd5b50600754610186565b34801561026757600080fd5b506101b46107d4565b34801561027c57600080fd5b5061028561089a565b6040516101679190611fd6565b34801561029e57600080fd5b506000546101d6906001600160a01b031681565b6101b46102c0366004611fbd565b610928565b3480156102d157600080fd5b506101b46102e0366004612025565b6109f1565b3480156102f157600080fd5b506101b4610300366004612099565b610b24565b34801561031157600080fd5b50610285610ba3565b34801561032657600080fd5b50610186610335366004611fbd565b610bb0565b34801561034657600080fd5b506101d673deaddeaddeaddeaddeaddeaddeaddeaddeaddead81565b34801561036e57600080fd5b506101b461037d3660046120b4565b610bd1565b34801561038e57600080fd5b506001546101d6906001600160a01b031681565b3480156103ae57600080fd5b506101d66001603160981b0181565b3480156103c957600080fd5b50610186662386f26fc1000081565b3480156103e457600080fd5b506101b46103f3366004612099565b611376565b3373deaddeaddeaddeaddeaddeaddeaddeaddeaddead146104605760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206973206e6f74207468652073797374656d2063616c6c65720060448201526064015b60405180910390fd5b600154600160a01b900460ff16156104ba5760405162461bcd60e51b815260206004820152601f60248201527f436f6e747261637420697320616c726561647920696e697469616c697a6564006044820152606401610457565b8160000361050a5760405162461bcd60e51b815260206004820152601a60248201527f566572696669657220636f756e742063616e6e6f7420626520300000000000006044820152606401610457565b600085900361055b5760405162461bcd60e51b815260206004820152601e60248201527f4465706f736974207363726970742063616e6e6f7420626520656d70747900006044820152606401610457565b6001805460ff60a01b1916600160a01b179055600461057b868883612191565b506005610589848683612191565b5060038290556002805473deaddeaddeaddeaddeaddeaddeaddeaddeaddead6001600160a01b03199182168117909255600080549091166001600160a01b0384161781556040805191825260208201929092527ffbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad03910160405180910390a17f89ed79f38bee253aee2fb8d52df0d71b4aaf0843800d093a499a55eeca455c34868686868660405161063e95949392919061227b565b60405180910390a1505050505050565b61065f81662386f26fc100006122cb565b34146106a75760405162461bcd60e51b8152602060048201526017602482015276125b9d985b1a59081dda5d1a191c985dc8185b5bdd5b9d604a1b6044820152606401610457565b60075460005b828110156107585760078484838181106106c9576106c96122e2565b835460018101855560009485526020948590209190940292909201359190920155507fc96d1af655ee5eb07357bb1097f3b2f247ea0c4e3cf5f9a5c8449c4f8b64fb6b84848381811061071e5761071e6122e2565b90506020020135828461073191906122f8565b604080519283526020830191909152429082015260600160405180910390a16001016106ad565b50505050565b6000546001600160a01b031633146107885760405162461bcd60e51b81526004016104579061230b565b600080546001600160a01b03191681556040805182815260208101929092527f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0910160405180910390a1565b6001546001600160a01b0316331461082e5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f742070656e64696e67206f776e657200000000006044820152606401610457565b60008054600180546001600160a01b03198084166001600160a01b038084169190911786559116909155604080519190921680825260208201939093527f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091015b60405180910390a150565b600580546108a790612106565b80601f01602080910402602001604051908101604052809291908181526020018280546108d390612106565b80156109205780601f106108f557610100808354040283529160200191610920565b820191906000526020600020905b81548152906001019060200180831161090357829003601f168201915b505050505081565b662386f26fc1000034146109785760405162461bcd60e51b8152602060048201526017602482015276125b9d985b1a59081dda5d1a191c985dc8185b5bdd5b9d604a1b6044820152606401610457565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68881018290556040805183815260208101839052428183015290517fc96d1af655ee5eb07357bb1097f3b2f247ea0c4e3cf5f9a5c8449c4f8b64fb6b9181900360600190a15050565b6000546001600160a01b03163314610a1b5760405162461bcd60e51b81526004016104579061230b565b80600003610a6b5760405162461bcd60e51b815260206004820152601a60248201527f566572696669657220636f756e742063616e6e6f7420626520300000000000006044820152606401610457565b6000849003610abc5760405162461bcd60e51b815260206004820152601e60248201527f4465706f736974207363726970742063616e6e6f7420626520656d70747900006044820152606401610457565b6004610ac9858783612191565b506005610ad7838583612191565b5060038190556040517f89ed79f38bee253aee2fb8d52df0d71b4aaf0843800d093a499a55eeca455c3490610b15908790879087908790879061227b565b60405180910390a15050505050565b6000546001600160a01b03163314610b4e5760405162461bcd60e51b81526004016104579061230b565b600280546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527ffbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad03910161088f565b600480546108a790612106565b60078181548110610bc057600080fd5b600091825260209091200154905081565b6002546001600160a01b03163314610c2b5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f720000000000006044820152606401610457565b6000610c89610c3d6020840184612338565b610c4d6040850160208601612362565b610c5a604086018661238c565b610c67606088018861238c565b610c7460808a018a61238c565b610c8460c08c0160a08d01612338565b6113fc565b60008181526006602052604090205490915060ff1615610ce15760405162461bcd60e51b81526020600482015260136024820152721ddd1e125908185b1c9958591e481cdc195b9d606a1b6044820152606401610457565b60008181526006602052604090819020805460ff19166001179055610d4690610d0c9084018461238c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144492505050565b610d925760405162461bcd60e51b815260206004820152601d60248201527f56696e206973206e6f742070726f7065726c7920666f726d61747465640000006044820152606401610457565b610ddc610da2606084018461238c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114e892505050565b610e285760405162461bcd60e51b815260206004820152601e60248201527f566f7574206973206e6f742070726f7065726c7920666f726d617474656400006044820152606401610457565b6000610e74610e3a604085018561238c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157f92505050565b91505080600114610ec05760405162461bcd60e51b815260206004820152601660248201527513db9b1e481bdb99481a5b9c1d5d08185b1b1bddd95960521b6044820152606401610457565b610f0c610ed0608085018561238c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611596915050565b610f625760405162461bcd60e51b815260206004820152602160248201527f5769746e657373206973206e6f742070726f7065726c7920666f726d617474656044820152601960fa1b6064820152608401610457565b6001603160981b01634ffd344a60e085013584610f8260c088018861238c565b8861010001356040518663ffffffff1660e01b8152600401610fa89594939291906123d3565b602060405180830381865afa158015610fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe99190612405565b6110355760405162461bcd60e51b815260206004820152601b60248201527f5472616e73616374696f6e206973206e6f7420696e20626c6f636b00000000006044820152606401610457565b6000611081611047608086018661238c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250925061160c915050565b9050600061108e8261157f565b91505060035460026110a091906122f8565b81146110e65760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207769746e657373206974656d7360581b6044820152606401610457565b60006110f4836003546116ef565b905060006004805461110590612106565b9150600090506111168382846118b9565b90506111ac816004805461112990612106565b80601f016020809104026020016040519081016040528092919081815260200182805461115590612106565b80156111a25780601f10611177576101008083540402835291602001916111a2565b820191906000526020600020905b81548152906001019060200180831161118557829003601f168201915b505050505061197d565b6111f15760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590819195c1bdcda5d081cd8dc9a5c1d60521b6044820152606401610457565b60006112206112018460146122f8565b61120c8560146122f8565b86516112189190612427565b8691906118b9565b9050611233816005805461112990612106565b6112775760405162461bcd60e51b8152602060048201526015602482015274092dcecc2d8d2c840e6c6e4d2e0e840e6eaccccd2f605b1b6044820152606401610457565b600061128285611a3f565b604080518b81526001600160a01b0383166020820152428183015290519192507f182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac919081900360600190a16000816001600160a01b0316662386f26fc1000060405160006040518083038185875af1925050503d8060008114611321576040519150601f19603f3d011682016040523d82523d6000602084013e611326565b606091505b50509050806113695760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610457565b5050505050505050505050565b6000546001600160a01b031633146113a05760405162461bcd60e51b81526004016104579061230b565b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278910161088f565b60006114368a8a8a8a8a8a8a8a8a6040516020016114229998979695949392919061243a565b604051602081830303815290604052611a75565b9a9950505050505050505050565b60008060006114528461157f565b9092509050801580611465575060001982145b15611474575060009392505050565b60006114818360016122f8565b905060005b828110156114db57855182106114a25750600095945050505050565b60006114ae8784611a9c565b905060001981036114c6575060009695505050505050565b6114d081846122f8565b925050600101611486565b5093519093149392505050565b60008060006114f68461157f565b9092509050801580611509575060001982145b15611518575060009392505050565b60006115258360016122f8565b905060005b828110156114db57855182106115465750600095945050505050565b60006115528784611ae5565b9050600019810361156a575060009695505050505050565b61157481846122f8565b92505060010161152a565b60008061158d836000611b49565b91509150915091565b6000816000036115a857506000611606565b6000805b838110156115ff57845182106115c757600092505050611606565b60006115d38684611ced565b905060001981036115ea5760009350505050611606565b6115f481846122f8565b9250506001016115ac565b5083511490505b92915050565b606060008060005b84811015611685576116268683611ced565b925060001983036116715760405162461bcd60e51b815260206004820152601560248201527442616420566172496e7420696e207769746e65737360581b6044820152606401610457565b61167b83836122f8565b9150600101611614565b506116908582611ced565b915060001982036116db5760405162461bcd60e51b815260206004820152601560248201527442616420566172496e7420696e207769746e65737360581b6044820152606401610457565b6116e68582846118b9565b95945050505050565b60606000806116fd8561157f565b90925090506001820161175d5760405162461bcd60e51b815260206004820152602260248201527f52656164206f76657272756e20647572696e6720566172496e742070617273696044820152616e6760f01b6064820152608401610457565b80841061179f5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610457565b6000806117ad8460016122f8565b905060005b86811015611838576117c48883611b49565b90955092506001830161180e5760405162461bcd60e51b815260206004820152601260248201527142616420566172496e7420696e206974656d60701b6044820152606401610457565b8261181a8660016122f8565b61182491906122f8565b61182e90836122f8565b91506001016117b2565b506118438782611b49565b90945091506001820161188d5760405162461bcd60e51b815260206004820152601260248201527142616420566172496e7420696e206974656d60701b6044820152606401610457565b6118ae8161189b86856122f8565b6118a69060016122f8565b8991906118b9565b979650505050505050565b6060816000036118d85750604080516020810190915260008152611976565b60006118e483856122f8565b905083811180156118f6575080855110155b6119385760405162461bcd60e51b8152602060048201526013602482015272536c696365206f7574206f6620626f756e647360681b6044820152606401610457565b604051915082604083010160405282825283850182038460208701018481015b8082101561197157815183830152602082019150611958565b505050505b9392505050565b600081518351146119c75760405162461bcd60e51b8152602060048201526014602482015273098cadccee8d0e640c8de40dcdee840dac2e8c6d60631b6044820152606401610457565b825160005b81811015611a34578381815181106119e6576119e66122e2565b602001015160f81c60f81b6001600160f81b031916858281518110611a0d57611a0d6122e2565b01602001516001600160f81b03191614611a2c57600092505050611606565b6001016119cc565b506001949350505050565b60008060048054611a4f90612106565b915060009050611a61848360146118b9565b611a6a906124a2565b60601c949350505050565b60006020600083516020850160025afa50602060006020600060025afa5050600051919050565b6000806000611aab8585611d8b565b909250905060018201611ac45760001992505050611606565b80611ad08360256122f8565b611ada91906122f8565b6116e69060046122f8565b6000611af28260096122f8565b83511015611b035750600019611606565b600080611b1a85611b158660086122f8565b611b49565b909250905060018201611b335760001992505050611606565b80611b3f8360096122f8565b6116e691906122f8565b6000806000611b588585611dcd565b90508060ff16600003611b8d576000858581518110611b7957611b796122e2565b016020015190935060f81c9150611ce69050565b83611b998260016124de565b60ff16611ba691906122f8565b85511015611bbd5760001960009250925050611ce6565b60008160ff16600203611c0157611bf6611be2611bdb8760016122f8565b8890611e53565b62ffff0060e882901c1660f89190911c1790565b61ffff169050611cdc565b8160ff16600403611c5057611c43611c1d611bdb8760016122f8565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b63ffffffff169050611cdc565b8160ff16600803611cdc57611ccf611c6c611bdb8760016122f8565b60c01c64ff000000ff600882811c91821665ff000000ff009390911b92831617601090811b67ffffffffffffffff1666ff00ff00ff00ff9290921667ff00ff00ff00ff009093169290921790911c65ffff0000ffff1617602081811c91901b1790565b67ffffffffffffffff1690505b60ff909116925090505b9250929050565b6000806000611cfc8585611b49565b909250905060018201611d155760001992505050611606565b600080611d238460016122f8565b905060005b83811015611d8057611d3a8883611b49565b909550925060018301611d565760001995505050505050611606565b82611d628660016122f8565b611d6c91906122f8565b611d7690836122f8565b9150600101611d28565b509695505050505050565b600080611d998360256122f8565b84511015611dae575060001990506000611ce6565b600080611dc086611b158760246122f8565b9097909650945050505050565b6000828281518110611de157611de16122e2565b016020015160f81c60ff03611df857506008611606565b828281518110611e0a57611e0a6122e2565b016020015160f81c60fe03611e2157506004611606565b828281518110611e3357611e336122e2565b016020015160f81c60fd03611e4a57506002611606565b50600092915050565b60006119768383016020015190565b60008083601f840112611e7457600080fd5b50813567ffffffffffffffff811115611e8c57600080fd5b602083019150836020828501011115611ce657600080fd5b80356001600160a01b0381168114611ebb57600080fd5b919050565b60008060008060008060808789031215611ed957600080fd5b863567ffffffffffffffff80821115611ef157600080fd5b611efd8a838b01611e62565b90985096506020890135915080821115611f1657600080fd5b50611f2389828a01611e62565b90955093505060408701359150611f3c60608801611ea4565b90509295509295509295565b60008060208385031215611f5b57600080fd5b823567ffffffffffffffff80821115611f7357600080fd5b818501915085601f830112611f8757600080fd5b813581811115611f9657600080fd5b8660208260051b8501011115611fab57600080fd5b60209290920196919550909350505050565b600060208284031215611fcf57600080fd5b5035919050565b60006020808352835180602085015260005b8181101561200457858101830151858201604001528201611fe8565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060008060006060868803121561203d57600080fd5b853567ffffffffffffffff8082111561205557600080fd5b61206189838a01611e62565b9097509550602088013591508082111561207a57600080fd5b5061208788828901611e62565b96999598509660400135949350505050565b6000602082840312156120ab57600080fd5b61197682611ea4565b6000602082840312156120c657600080fd5b813567ffffffffffffffff8111156120dd57600080fd5b8201610120818503121561197657600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061211a57607f821691505b60208210810361213a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561218c576000816000526020600020601f850160051c810160208610156121695750805b601f850160051c820191505b8181101561218857828155600101612175565b5050505b505050565b67ffffffffffffffff8311156121a9576121a96120f0565b6121bd836121b78354612106565b83612140565b6000601f8411600181146121f157600085156121d95750838201355b600019600387901b1c1916600186901b17835561224b565b600083815260209020601f19861690835b828110156122225786850135825560209485019460019092019101612202565b508682101561223f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061228f606083018789612252565b82810360208401526122a2818688612252565b9150508260408301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611606576116066122b5565b634e487b7160e01b600052603260045260246000fd5b80820180821115611606576116066122b5565b60208082526013908201527221b0b63632b91034b9903737ba1037bbb732b960691b604082015260600190565b60006020828403121561234a57600080fd5b81356001600160e01b03198116811461197657600080fd5b60006020828403121561237457600080fd5b81356001600160f01b03198116811461197657600080fd5b6000808335601e198436030181126123a357600080fd5b83018035915067ffffffffffffffff8211156123be57600080fd5b602001915036819003821315611ce657600080fd5b8581528460208201526080604082015260006123f3608083018587612252565b90508260608301529695505050505050565b60006020828403121561241757600080fd5b8151801515811461197657600080fd5b81810381811115611606576116066122b5565b6001600160e01b03198a811682526001600160f01b03198a166004830152600090888a60068501378883016006810160008152888a82375087810190506006810160008152868882375093169390920160068101939093525050600a01979650505050505050565b805160208201516bffffffffffffffffffffffff1980821692919060148310156124d65780818460140360031b1b83161693505b505050919050565b60ff8181168382160190811115611606576116066122b556fea26469706673582212208ac886a40f4e63c08869cffdbd467cd0915776904e3e07abc50ccf0e78458f5d64736f6c63430008190033")),
        0,
        HashMap::new(),
    ));
}
